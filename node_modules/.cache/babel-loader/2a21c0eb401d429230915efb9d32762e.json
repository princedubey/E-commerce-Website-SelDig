{"ast":null,"code":"import { createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<br><table class=\\\"table\\\"><thead><tr><th scope=\\\"col\\\"></th><th scope=\\\"col\\\">Customer ID</th><th scope=\\\"col\\\">Date</th><th scope=\\\"col\\\">Total Price</th><th scope=\\\"col\\\">Orders</th></tr></thead><tbody><tr><th scope=\\\"row\\\">1</th><td>Mark</td><td>Otto</td><td>@mdo</td></tr></tbody></table>\", 2);\n\nconst _hoisted_4 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_4);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;;;;;oBACTC;;uBADFC,oBAqBM,KArBN,cAqBMC,UArBN","names":["class","_hoisted_2","_createElementBlock","_hoisted_4"],"sourceRoot":"","sources":["/home/rani/Desktop/programmation/web dev/myprojectvuejs/src/views/Orders.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <br />\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\"></th>\n          <th scope=\"col\">Customer ID</th>\n          <th scope=\"col\">Date</th>\n          <th scope=\"col\">Total Price</th>\n          <th scope=\"col\">Orders</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th scope=\"row\">1</th>\n          <td>Mark</td>\n          <td>Otto</td>\n          <td>@mdo</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n<script>\nimport \"../Firebase\";\n\nimport {\n  collection,\n  query,\n  getFirestore,\n  onSnapshot,\n} from \"firebase/firestore\";\nconst db = getFirestore();\nconst q = query(collection(db, \"Checkout\"));\nconst auth = query(collection(db, \"users\"));\nexport default {\n  name: \"OrdersView\",\n  data() {\n    return {\n      UserData: {\n        name: \"\",\n      },\n      orders: [],\n    };\n  },\n  created() {\n    onSnapshot(q, (querySnapshot) => {\n      this.orders = [];\n      querySnapshot.forEach((doc) => {\n        let xx = this.GetUserdata(doc.data().uid);\n\n        this.orders.push({\n          key: doc.id,\n          name: xx,\n          date: doc.data().date,\n          total: doc.data().total,\n          uid: doc.data().uid,\n          cart: doc.data().cart,\n        });\n        console.log(this.orders);\n      });\n    });\n  },\n  methods: {\n    GetUserdata(uid) {\n      onSnapshot(auth, (querySnapshot1) => {\n        querySnapshot1.forEach((doc1) => {\n          if (doc1.data().uid == uid) {\n            return doc1.data().name;\n          }\n        });\n      });\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module"}